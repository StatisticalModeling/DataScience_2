---
title: "But what do the nuns think?"
date: last-modified
date-format: "[Last modified on] MMMM DD, YYYY HH:mm:ss zzz"
format: 
  html: default
  pdf: default
editor: source
---

```{r include = FALSE}
library(knitr) # packages
library(tidyverse)
library(scales)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", comment = NA, message = FALSE,  warning = FALSE)
```

:::{.callout-note title="Crediting the materials" icon=false}
This majority of the material in the first part of this document is taken from the free online course at [https://supervised-ml-course.netlify.app/](https://supervised-ml-course.netlify.app/) written by Julia Silge.
:::

This case study uses an extensive survey of Catholic nuns fielded in 1967 to once more put your practical machine learning skills to use. You will predict the age of these religious women from their responses about their beliefs and attitudes.

## Surveying Catholic sisters in 1967

You have made it to the last case study of our course! 🎉 It is a particularly compelling one, where we are going to practice some advanced skills in modeling.

In 1967, a Catholic nun named Sister Marie Augusta Neal who had a PhD in sociology from Harvard fielded a survey of all members of Catholic women's religious communities, i.e., nuns. It was a survey with over 600 questions that went out to over 130,000 individual sisters and was fielded in a time of significant change both for the Catholic church and society in general.

This survey is so big with so much data that we're actually only giving you a subset, about one quarter of it, in your environment here during the case study. The whole survey is available online and it is pretty interesting, so I encourage you to take a look for yourself.

### Conference of Major Superiors of Women Sisters' Survey
  * Fielded in 1967 with over 600 questions
  * Responses from over 130,000 sisters in almost 400 congregations
  * Data is freely [available](https://curate.nd.edu/articles/dataset/The_Conference_of_Major_Superiors_of_Women_CMSW_Sisters_Survey_of_1967/24723888)
  
There is demographic information in the survey, along with a lot of diverse kinds of questions. About 60 of the survey questions were agreement questions, with a statement (of some kind) that the survey asked the respondent to agree or disagree with on this scale. The answers are coded as integers from 1 to 5.  

The integer 1 corresponds to "disagree very much" and 5 corresponds to "agree very much". This kind of coding is convenient for our modeling purposes here. The data that you will have available within this case study is only this subset of the survey: the agree/disagree statements, plus age.

The original survey question asked for age in bins of 10 years, under 20, from 21 to 30, from 31 to 40, and so forth. I have recoded these as numeric values corresponding to the top of each age bin, 20, 30, 40, and so on. This means that this isn't quite a continuous variable, since we haven't measured these women's ages very precisely, but we can do a pretty good job modeling it as if it is. There are more sophisticated modeling approaches possible with these kinds of measurements that you could explore.

These agreement questions on the survey are mostly social and religious in nature, focusing on what the respondent believes about society, the place of religion within the world, and her own role.

I do want to point out that this survey was fielded during the 1960s and there are some words used, for example for people of color, that are not used in professional or academic environments today. This is a historical dataset that we can approach and understand as centered in its context.

### Opinions and attitudes in the 1960s
  * "Catholics should boycott indecent movies."
  * "In the past 25 years, this country has moved dangerously close to socialism."
  * "I would rather be called an idealist than a practical person."
  
In this case study, we are going to spend a bit more effort on exploratory data analysis. You are going to create a tidy version of the survey data with one row per observation.

In the original way the data is structured, there is one row per respondent with a separate column for each answer. After you tidy the data, using the function `pivot_longer()`, you will have one row for each combination of respondent and question, a much longer and skinnier dataset. This kind of tidy data structure is well suited to exploratory data analysis.

Let's go learn something about Catholic nuns in the 1960s.

## Choose an appropriate model

In this case study, you will predict the age of Catholic nuns from their answers on a survey fielded in 1967 focusing on questions about social and religious issues. What kind of model will you build?  To predict a continuous, numeric quantity like `age`, use **regression models**.

## Visualize the age distribution

The first step before you start modeling is to explore your data, and we are going to spend a little more time on this step in this last case study. To start with, check out the distribution of ages for the respondents in this survey. 📊 (Keep in mind throughout this case study that the data you have in your environment is one quarter of the real survey data.)

### Instructions

```{r}
library(tidyverse)
library(tidymodels)
sisters67 <- read_csv("../Data/sisters.csv")
```


* Call `glimpse()` on `sisters67` to take a look at the structure of the data. Notice how many columns there are, and what their characteristics are.

```{r}
# View sisters67
glimpse(sisters67)
```

* Plot a histogram of `age`.

```{r}
# Plot the histogram
ggplot(sisters67, aes(x = age)) +
  geom_histogram(binwidth = 10, color = "black", fill = "purple") +
  theme_bw()
```

## Tidy the survey data

Embracing [tidy data principles](https://tidyverse.tidyverse.org/articles/manifesto.html) is a powerful option for exploratory data analysis. When your data is tidy, you can quickly iterate in getting to know your data better and making exploratory plots. Let’s transform this **wide** data set into a **tidy** data frame with one observation per row, and then check out some characteristics of this subset of the original survey.

:::{.callout-note title="Using select()"}
There is a column called sister in this dataset that is an identifier for each survey respondent. We are removing this column in the exercise using [`select()`](https://dplyr.tidyverse.org/reference/select.html).
:::

### Instructions

* Use the `pivot_longer()` function to transform the wide data set with each survey question in a separate column to a narrow, tidy data set with each survey question in a separate row.

```{r}
# Tidy the data set
tidy_sisters <- sisters67 |> 
    select(-sister) |> 
    pivot_longer(-age, names_to = "question", values_to = "rating")
```

* View the structure of this tidy data set using `glimpse()`.

```{r}
# Print the structure of tidy_sisters
glimpse(tidy_sisters)
```

Next look at question agreement overall.

### Instructions

Group by `age` and summarize the `rating` column to see how the overall agreement with all questions varied by `age`.

```{r}
# Overall agreement with all questions varied by age
tidy_sisters  |> 
    group_by(age)  |> 
    summarize(rating = mean(rating, na.rm = TRUE))
```

* Count the `rating` column to check out how many respondents agreed or disagreed overall.

```{r}
# Number of respondents agreed or disagreed overall
tidy_sisters |> 
    count(rating)
```

## Exploratory data analysis with tidy data

You just created a tidy version of this survey data, which allows you to quickly ask and answer many different kinds of questions in exploratory data analysis.

You can easily see how many times survey respondents chose each option on the agreement scale with just one call to dplyr's [`count()`](https://dplyr.tidyverse.org/reference/n_distinct.html?q=count#null) function.

We can see here that 1 was the most commonly chosen option; this corresponds to "disagree very much". The options for disagree very much, agree very much, and agree somewhat are chosen much more often than the other two.

You can also check out how the overall answers to all survey questions vary with age. There were more statements on the survey that older respondents agreed with than statements younger respondents agreed with.

We can go a few steps further and dig into how the answers to individual questions depend on age. The code below first filters to a subset of questions on the survey, groups by these survey questions and the possible answers to them, and then calculates the mean age for each possible answer to each of the questions we're considering.

```{r}
#| label: "fig-sisters"
#| fig-cap: "Trends for questions v153 - v170"
tidy_sisters |> 
    filter(question %in% paste0("v", 153:170)) %>%
    group_by(question, rating) %>%
    summarise(age = mean(age)) %>%
    ggplot(aes(rating, age, color = question)) +
    geom_line(alpha = 0.5, size = 1.5) +
    geom_point(size = 2) +
    facet_wrap(~question)
```


This is now getting closer to what we really care about and we can then pipe it to `ggplot2` to make an exploratory plot to visualize these relationships. 📊 @fig-sisters shows trends for a subset of the questions on the survey. Let's talk through a few of them.

The first question in this plot, v153, slopes downward. This means that the more a respondent agreed with this statement, the younger she was. What was v153 on the survey?  v153 was "People who don't believe in God have as much right to freedom of speech as anyone else."  This item was a statement about support of freedom of speech, regardless of religious belief.

Other panels of this plot look different. v161, for example, slopes upward, which means that the more a respondent agreed with this statement, the older she was. What was this statement? v161 was "I like conservatism because it represents a stand to preserve our glorious heritage."  This item on the survey was a statement about identifying with conservatism and heritage.

Notice that some panels in the plot don't slope up or down; there is no strong trend with age for some statements. Let's look at v165; see how it is flat and we don't see any trends up or down.  v165 was "Catholics as a group should consider active opposition to US participation in Vietnam."  This statement was about the Vietnam War, which was in a pivotal period in 1967. There is no trend with age that we can see in this plot, meaning that we don't see evidence here that younger or older Catholic nuns had different opinions about the United States involvement in the war.

These are the relationships that we want to build a machine learning model to understand and use for prediction. Exploratory data analysis is an important first step so that you as a machine learning practitioner understand something about your data and what your model will be capable of learning.

Once you have done that important exploration, you can build a very simple model and then create **training** and **testing** sets. 💫

In this case study, you are going to split the original data into three sets:

  * training,
  * validation, and
  * test sets.
  
You've already used training and test sets throughout this course, and in this last case study we're going to talk about how to use a validation set to choose a model. 🧐

In previous case studies, we used resampling to choose a model. Resampling lets you use your training data to create simulated datasets. These simulated datasets can help you learn which model is best without relying on performance metrics for the training set as a whole (which are overly optimistic) or the testing set (which can only be used one time at the very end of your analysis.)

If you have enough data, you may not need resampling at all and instead can divide your data into a training set, a validation set, and a testing set. Instead of computing performance metrics on resampled datasets, you can compute them for the validation set. This survey of nuns is quite large so we can create a validation set to use for choosing a model. You can think of a validation set as a **single resample**.

To split your data into three sets (training, validation, and testing), first make an `initial_split()` to split off your testing set from the rest. Then use the function `validation_split()` to create what you can think of as a single resample of that data.

```{r}
sisters_select <- read_csv("../Data/sisters.csv") |> 
    select(-sister)
set.seed(123)
sisters_splits <- initial_split(sisters_select, strata = age)

sisters_other <- training(sisters_splits)
sisters_test <- testing(sisters_splits)

set.seed(123)
sisters_val <- validation_split(sisters_other, strata = age)

sisters_val
```

Now it's your turn to take your tidy dataset and practice exploring for yourself.


## Visualize agreement with `age`

The tidied version of the survey data that you constructed is available in your environment. You have many options at your fingertips with this tidy data now. Make a plot that shows how agreement on a subset of the questions changes with age. 📉 In this exercise, we are using [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) to subset the data to just a subset of the questions on the survey to look at.

### Instructions

* Group by two variables, `question` and `rating`, so you can calculate an average `age` for each answer to each question.

* Summarize for each grouping to find an average `age`.

* Choose the correct `geom` to make a line plot.


```{r}
# Visualize agreement with age
tidy_sisters  |> 
    filter(question %in% paste0("v", 153:170))  |> 
    group_by(question, rating)  |> 
    summarize(age = mean(age, na.rm = TRUE))  |> 
    ggplot(aes(rating, age, color = question)) +
    geom_line(show.legend = FALSE) +
    facet_wrap(~question, nrow = 3) 
```

## Training, validation, and testing data

It’s time to split your data into different sets now. You’ve done this three times already in this course, but in this last case study we are also going to create a validation set. Using a validation set is a good option when you have enough data (otherwise, you can use resampling).

```{r}
sisters_select <- read_csv("../Data/sisters.csv") |> 
    select(-sister)
```


### Instructions

* Create two data partitions:

    + Specify one to split between testing and everything else.
    
    + Specify another one to split between validation and training.

```{r}
# Split off the testing set
set.seed(123)
sisters_split <- initial_split(sisters_select, strata = age)

sisters_other <- training(sisters_split)
sisters_test <- testing(sisters_split)

# Create the validation split
set.seed(123)
sisters_val <- validation_split(sisters_other, strata = age)

glimpse(sisters_val)
```

## Using your validation set

This new validation set you just created will be used to compare models you have trained and choose which one to use.  A validation test is used to compare models or tune hyperparameters.

## Tune model hyperparameters

You have prepared training, validation, and test sets and now it's time to build predictive models.

In this last case study, you are going to work with model hyperparameters for the first time in this course. Some model parameters cannot be learned directly from a dataset during model training; these kinds of parameters are called hyperparameters. 💥 Some examples of hyperparameters include the number of predictors that are sampled at splits in a tree-based model (we call this `mtry` in tidymodels) or the learning rate in a boosted tree model (we call this `learn_rate`).

Instead of learning these kinds of hyperparameters during model training, we can estimate the best values for these values by training many models on a resampled data set (like the validation set you just created) and measuring how well all these models perform. This process is called **tuning**.

You can identify which parameters to `tune()` in a model specification as shown here. Let's build a decision tree model to predict `age` for our nuns, and tune the cost complexity and the maximum tree depth.

### What is a model hyperparameter?

```{r}
tree_spec <- decision_tree(
  cost_complexity = tune(),
  tree_depth = tune()
) |> 
  set_engine("rpart") |> 
  set_mode("regression")
```


Model hyperparameters aren't the only things you can tune. You can also tune steps in your preprocessing pipeline. This recipe has two steps:

* First, this recipe centers and scales all those numeric predictors we have in this dataset, cataloging the nuns' responses to the survey questions.

* Second, this recipe implements principal component analysis on these same predictors. Except... this recipe identifies that we want to implement PCA and we aren't sure how many predictors we should use. We want to choose the best 🏆 number of predictors.

```{r}
sisters_recipe <- recipe(age ~ ., data = sisters_other) |> 
  step_normalize(all_predictors())  |> 
  step_pca(all_predictors(), num_comp = tune())
```

You have a couple of options for how to choose which possible values for the tuning parameters to try. One option is to set up a grid of possible parameter values.

Here, we are using default ranges for cost complexity and tree depth, and we are going to try 3 to 12 principal components. When we set `levels = 5`, we are saying we want five levels for each parameter, which means there will be 125 (5 * 5 * 5) total models to try.

You can use the function `tune_grid()` to fit all these models; you can tune either a workflow or a model specification with a set of resampled data, such as the validation set you created (i.e. a single `resample`).

### Grid of tuning parameters

```{r}
grid_regular(num_comp(c(3, 12)),
             cost_complexity(),
             tree_depth(),
             levels = 5)
```

You train these 125 possible models on the training data and use the validation data to compare all the results in terms of performance. We won't use the testing data until the very end of our modeling process, when we use it to estimate how our model will perform on new data.

### Why three data partitions?

For some modeling use cases, an approach with three data partitions is overkill, perhaps a bit too much, but if you have enough data that you can use some of these powerful machine learning algorithms or techniques, the danger you face is underestimating your uncertainty for new data if you estimate it with data that you used to pick a model.

To get a reliable estimate from tuning, for example, you need to use another heldout dataset for assessing the models, either a validation set or a set of simulated datasets created through resampling.

Why three data partitions? Don't overestimate how well your model is performing! 🙅

### Tune model hyperparameters

This dataset of extensive survey responses from Catholic nuns in the 1960s is a great demonstration of all of these issues. You will use your validation set to find which values of the parameters (cost complexity, tree depth, and number of principal components) result in the highest R-squared and lowest RMSE. Notice here that we get the best results with a tree depth of 4 and 5 principal components.

As you work through the final set of exercises, you will see all of this come together, along with all the other practical predictive modeling skills we've explored in this course.

## Identify tuning parameters

It’s time to build a modeling `workflow()` for this last dataset. We aren’t going to fit this dataset just once, but instead many times! We are going to use this `workflow()` to tune hyperparameters both in our model specification and our preprocessing recipe.

### Instructions

Let’s start with our preprocessing tuning.

* Add two preprocessing steps to this recipe, first to normalize and them to implement PCA.

* Specify that we want to `tune()` the number of principal components.

```{r, warning = TRUE, message = TRUE}
sisters_recipe <- recipe(age ~ ., data = sisters_other)  |>  
    step_normalize(all_predictors())  |> 
    step_pca(all_predictors(), num_comp = tune())

sisters_recipe
```

